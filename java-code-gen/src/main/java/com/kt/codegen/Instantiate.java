package com.kt.codegen;


import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;


/**
 * Specifies that a new class should be generated by instantiating the generic class with the given
 * type (or types if there are multiple generic type parameters).
 */
@Repeatable(Instantiations.class)
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.SOURCE)
public @interface Instantiate {
    /**
     * The concrete type(s) to replace the type parameter(s) with. The number of types supplied must match
     * the number of type parameters of the class.
     *
     * @return The concrete types to replace the type parameters with.
     */
    Class<?>[] value();

    /**
     * An optional list of string replacements (plain or regex) to apply on top of the generic type replacements.
     * This can be useful to e.g. replace generic array construction of generic type {@code T1} with
     * primitive array construction:
     *
     * <pre>
     * {@code
     * @Replace(from = "(T1[]) new Object[", to = "new double["
     * }
     * </pre>
     *
     * @return An optional list of string replacements (plain or regex) to apply on top of the generic type replacements.
     */
    Replace[] replace() default {};

    /**
     * Specifies if the concrete type names should be appended (true) or prepended (false) to the source class name.
     *
     * @return Specifies if the concrete type names should be appended (true) or prepended (false) to the source class name.
     */
    boolean append() default true;

}
